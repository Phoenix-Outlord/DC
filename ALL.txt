//Socket Programming (EXP_01)

import java.io.*;
import java.net.*;
import java.util.Scanner;

public class MyClient {
    public static void main(String[] args) {
        try {
            Socket s = new Socket("localhost", 6666);
            DataOutputStream dout = new DataOutputStream(s.getOutputStream());

            Scanner scanner = new Scanner(System.in);
            
	    /*System.out.print("Enter first number: ");
            int a = scanner.nextInt();
            System.out.print("Enter second number: ");
            int b = scanner.nextInt();
            System.out.print("Enter third number: ");
            int c = scanner.nextInt();

            int d = (a + b + c) / 3;

            dout.writeInt(d);*/

	    dout.writeUTF("Welcome To DC Practical");
            dout.flush();

            dout.close();
            s.close();
            scanner.close();

        } catch (Exception e) {
            System.out.println(e);
        }
    }
}






//Server

import java.io.*;
import java.net.*;

public class MyServer {
    public static void main(String[] args) {
        try {
            ServerSocket ss = new ServerSocket(6666);
            Socket s = ss.accept(); // establishes connection 

            DataInputStream dis = new DataInputStream(s.getInputStream());

            /*int average = dis.readInt();
            System.out.println("Average = " + average);*/

	    String str = (String)dis.readUTF();
	    System.out.println("Message = " + str);

            ss.close();

        } catch (Exception e) {
            System.out.println(e);
        }
    }
}






















//RMI (EXP_02)

//Client
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;

public class Client
{
    public static void main(String[]  args)
    {
        try
        {
            Registry registry=LocateRegistry.getRegistry(1099);
            RMI_Interface obj=(RMI_Interface) registry.lookup("HelloServer");
            int message = obj.sum(30,20);
            System.out.println("Message from server: "+message);
        }
        catch (Exception e) {
            System.out.println("Client Exception "+ e.toString());
        }
    }
}

//Server
import java.rmi.*;
import java.rmi.server.*;
import java.rmi.registry.Registry;
import java.rmi.registry.LocateRegistry;
public class Server extends UnicastRemoteObject implements RMI_Interface {
    Server() throws RemoteException {
        super();
    }
    public int sum(int a,int b) throws RemoteException {
        return (a+b);
    }
    public static void main(String[] args) {
        try{
            Server obj= new Server();
            LocateRegistry.createRegistry(1099);
            Registry registry=java.rmi.registry.LocateRegistry.getRegistry();
            registry.rebind("HelloServer",obj);
            System.out.println("Server is Ready");
        }catch(Exception e){
            System.err.println("Server Exception: "+e.toString());
            e.printStackTrace();
        }
    }

}

//Interface
import java.rmi.*;
public interface RMI_Interface extends Remote {
    public int sum(int a , int b) throws RemoteException;
}


















//Clock-Synchronization (EXP_03)

// C++ program to illustrate the Lamport's
// Logical Clock

#include <bits/stdc++.h>
using namespace std;

// Function to find the maximum timestamp
// between 2 events
int max1(int a, int b)
{
	// Return the greatest of the two
	if (a > b)
		return a;
	else
		return b;
}

// Function to display the logical timestamp
void display(int e1, int e2,
			int p1[5], int p2[3])
{
	int i;

	cout << "\nThe time stamps of "
		"events in P1:\n";

	for (i = 0; i < e1; i++) {
		cout << p1[i] << " ";
	}

	cout << "\nThe time stamps of "
		"events in P2:\n";

	// Print the array p2[]
	for (i = 0; i < e2; i++)
		cout << p2[i] << " ";
}

// Function to find the timestamp of events
void lamportLogicalClock(int e1, int e2,
						int m[7][5])
{
	int i, j, k, p1[e1], p2[e2];

	// Initialize p1[] and p2[]
	for (i = 0; i < e1; i++)
		p1[i] = i + 1;

	for (i = 0; i < e2; i++)
		p2[i] = i + 1;
	cout << "\t";
	for (i = 0; i < e2; i++)
		cout << "\te2" << i + 1;

	for (i = 0; i < e1; i++) {

		cout << "\n e1" << i + 1 << "\t";

		for (j = 0; j < e2; j++)
			cout << m[i][j] << "\t";
	}

	for (i = 0; i < e1; i++) {
		for (j = 0; j < e2; j++) {

			// Change the timestamp if the
			// message is sent
			if (m[i][j] == 1) {
				p2[j] = max1(p2[j], p1[i] + 1);
				for (k = j + 1; k < e2; k++)
					p2[k] = p2[k - 1] + 1;
			}

			// Change the timestamp if the
			// message is received
			if (m[i][j] == -1) {
				p1[i] = max1(p1[i], p2[j] + 1);
				for (k = i + 1; k < e1; k++)
					p1[k] = p1[k - 1] + 1;
			}
		}
	}

	// Function Call
	display(e1, e2, p1, p2);
}

// Driver Code
int main()
{
	int e1 = 7, e2 = 5, m[7][5];

	// message is sent and received
	// between two process

	/*dep[i][j] = 1, if message is sent
				from ei to ej
	dep[i][j] = -1, if message is received
					by ei from ej
	dep[i][j] = 0, otherwise*/
	m[0][0] = 0;
	m[0][1] = 0;
	m[0][2] = 0;
	m[0][3] = 0;
	m[0][4] = 0;
	
	m[1][0] = 0;
	m[1][1] = 0;
	m[1][2] = 1;
	m[1][3] = 0;
	m[1][4] = 0;
	
	m[2][0] = 0;
	m[2][1] = 0;
	m[2][2] = 0;
	m[2][3] = 0;
	m[2][4] = 0;
	
	m[3][0] = 0;
	m[3][1] = 0;
	m[3][2] = 0;
	m[3][3] = 0;
	m[3][4] = 0;
	
	m[4][0] = 0;
	m[4][1] = -1;
	m[4][2] = 0;
	m[4][3] = 0;
	m[4][4] = 0;
	
	m[5][0] = 0;
	m[5][1] = 0;
	m[5][2] = 0;
	m[5][3] = 0;
	m[5][4] = 1;
	
	m[6][0] = 0;
	m[6][1] = 0;
	m[6][2] = 0;
	m[6][3] = -1;
	m[6][4] = 0;
	m[6][0] = 0;
	

	// Function Call
	lamportLogicalClock(e1, e2, m);

	return 0;
}














//Election Algo (EXP_04)

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

struct Pro {
int id;
bool act;
Pro(int id) {
	this->id = id;
	act = true;
}
};

class Bully {
public:
int TotalProcess;
vector<Pro> process;
Bully() {}
void initialiseBully() {
	cout << "No of processes 5" << endl;
	TotalProcess = 5;
	process.reserve(TotalProcess);
	for (int i = 0; i < process.capacity(); i++) {
	process.emplace_back(i);
	}
}
void Election() {
	cout << "Process no " << process[FetchMaximum()].id << " fails" << endl;
	process[FetchMaximum()].act = false;
	cout << "Election Initiated by 2" << endl;
	int initializedProcess = 1;

	int old = initializedProcess;
	int newer = old + 1;

	while (true) {
	if (process[newer].act) {
		cout << "Process " << process[old].id << " pass Election(" << process[old].id << ") to" << process[newer].id << endl;
		old = newer;
	}

	newer = (newer + 1) % TotalProcess;
	if (newer == initializedProcess-1) {
		break;
	}
	}

	cout << "Process " << process[FetchMaximum()].id << " becomes coordinator" << endl;
	int coord = process[FetchMaximum()].id;

	old = coord;
	newer = (old + 1) % TotalProcess;

	while (true) {

	if (process[newer].act) {
		cout << "Process " << process[coord].id << " pass Coordinator(" << coord << ") message to process " << process[newer].id << endl;
		old = newer;
	}
	newer = (newer + 1) % TotalProcess;
	if (newer == coord) {
		cout << "End Of Election " << endl;
		break;
	}
	}
}
int FetchMaximum() {
	int Ind = 0;
	int maxId = -9999;
	for (int i = 0; i < process.size(); i++) {
	if (process[i].act && process[i].id > maxId) {
		maxId = process[i].id;
		Ind = i;
	}
	}
	return Ind;
}
};

int main() {
Bully object;
object.initialiseBully();
object.Election();
return 0;
}




//Mutual Exclusion(EXP_05)
#include<bits/stdc++.h>
using namespace std;
int main()
{
int ns,ncs,timestamp,site;
cout<<"Enter number of sites :";
cin>>ns;
cout<<"Enter number of sites which want to enter critical section:";
cin>>ncs;
vector<int> ts(ns,0);
vector<int> request;
map <int,int> mp;
for(int i=0;i<ncs;i++)
{
cout<<"\nEnter timestamp:";
cin>>timestamp;
cout<<"Enter site number:";
cin>>site;
ts[site-1]=timestamp;
request.push_back(site);

mp[timestamp]=site;
}
cout<<"\nSites and Timestamp:\n";
for(int i=0;i<ts.size();i++)
{
cout<<i+1<<" "<<ts[i]<<endl;
}
for(int i=0;i<request.size();i++)
{
cout<<"\n Request from site:"<<request[i]<<endl;
for(int j=0;j<ts.size();j++)
{
if(request[i]!=(j+1))
{
if(ts[j]>ts[request[i]-1] || ts[j]==0)
cout<<j+1<<" Replied\n";
else
cout<<j+1<<" Deferred\n";
}
}
}

cout<<endl;

map<int,int>:: iterator it;
it=mp.begin();
int c=0;
for(it=mp.begin();it!=mp.end();it++)
{
cout<<"Site "<<it->second<<" entered Critical Section \n";
if(c==0)
cout<<"\nSimilarly,\n\n";
c++;
}
return 0;
}





















//Task Assignment(EXP_06)
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

class Server {
private final String name;
private final Map<String, Integer> executionCosts; // Execution costs for each task
private int load;

public Server(String name) {
this.name = name;
this.executionCosts = new HashMap<>();
this.load = 0;
}


public String getName() {
return name;
}

public int getLoad() {
return load;
}

public void increaseLoad() {
load++;
}

public void decreaseLoad() {
load--;
}

public void setExecutionCost(String task, int cost) {
executionCosts.put(task, cost);
}

public int getExecutionCost(String task) {
return executionCosts.getOrDefault(task, 0); // Default to 0 if task not found
}
}



class LoadBalancer {
private final List<Server> servers;
private int currentIndex;

public LoadBalancer(List<Server> servers) {
this.servers = servers;
this.currentIndex = 0;
}

public Server getNextServer() {
Server nextServer = servers.get(currentIndex);
currentIndex = (currentIndex + 1) % servers.size();
return nextServer;
}
}

class Main {
private static final int COMMUNICATION_COST_PER_REQUEST = 2;

public static void main(String[] args) {
// Create servers
List<Server> servers = new ArrayList<>();


Server server1 = new Server("Server 1");
Server server2 = new Server("Server 2");
Server server3 = new Server("Server 3");

// Define execution costs for tasks on each server
server1.setExecutionCost("Task A", 5);
server1.setExecutionCost("Task B", 7);

server2.setExecutionCost("Task A", 6);
server2.setExecutionCost("Task B", 8);

server3.setExecutionCost("Task A", 4);
server3.setExecutionCost("Task B", 6);

servers.add(server1);
servers.add(server2);
servers.add(server3);

LoadBalancer loadBalancer = new LoadBalancer(servers);

int totalExecutionCost = 0;
int totalCommunicationCost = 0;

// Simulate requests



String[] tasks = {"Task A", "Task B"};
for (int i = 0; i < 10; i++) {
String task = tasks[i % tasks.length]; // Rotate through tasks
Server server = loadBalancer.getNextServer();
server.increaseLoad();

int executionCost = server.getExecutionCost(task);
totalExecutionCost += executionCost;

totalCommunicationCost += COMMUNICATION_COST_PER_REQUEST;
System.out.println("Request " + i + " (Task: " + task + ") handled by " + server.getName()
+

" (Execution Cost: $" + executionCost + ")");
}

// Print server loads
for (Server server : servers) {
System.out.println(server.getName() + " load: " + server.getLoad());
}

// Calculate total cost
int totalCost = totalExecutionCost + totalCommunicationCost;
System.out.println("Total Execution Cost: $" + totalExecutionCost);
System.out.println("Total Communication Cost: $" + totalCommunicationCost);



System.out.println("Total Cost: $" + totalCost);
}
}
